name: Build Check

on:
  push:
    branches: [main, master, feature/ci-build-check]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nix-community
          skipPush: true

      - name: Check flake
        run: nix flake check --all-systems

      - name: Check formatting
        run: nix fmt . -- --check

  discover-configurations:
    runs-on: ubuntu-latest
    outputs:
      darwin-configs: ${{ steps.discover.outputs.darwin-configs }}
      linux-configs: ${{ steps.discover.outputs.linux-configs }}
      all-packages: ${{ steps.discover.outputs.all-packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Discover all configurations
        id: discover
        run: |
          echo "Discovering configurations..."

          # Get all darwinConfigurations
          darwin_configs=$(nix eval --json .#darwinConfigurations --apply 'builtins.attrNames' | jq -c 'map({name: "darwinConfigurations." + ., target: "darwinConfigurations." + . + ".system", type: "darwin"})')
          echo "darwin-configs=$darwin_configs" >> $GITHUB_OUTPUT

          # Get all homeConfigurations and determine their systems
          USERNAME=$(nix eval --raw .#vars.username)
          home_configs_raw=$(nix eval --json .#homeConfigurations --apply 'builtins.attrNames')

          # Separate home configs by system architecture
          darwin_home_configs=$(echo "$home_configs_raw" | jq -c --arg username "$USERNAME" 'map(select(contains("@"))) | map({name: "homeConfigurations " + split("@")[1], target: "homeConfigurations.\"" + . + "\".activationPackage", type: "home-manager", system: (if (split("@")[1] | test("mbair")) then "aarch64-darwin" else "x86_64-linux" end)})')
          linux_home_configs=$(echo "$darwin_home_configs" | jq -c 'map(select(.system == "x86_64-linux"))')
          darwin_home_configs=$(echo "$darwin_home_configs" | jq -c 'map(select(.system == "aarch64-darwin"))')

          # Combine darwin configs
          combined_darwin=$(echo "$darwin_configs $darwin_home_configs" | jq -c -s 'add')
          echo "darwin-configs=$combined_darwin" >> $GITHUB_OUTPUT

          # Get all packages for all systems
          all_packages=$(nix eval --json .#packages --apply 'lib: builtins.concatLists (builtins.attrValues (builtins.mapAttrs (system: pkgs: builtins.map (name: {name: "packages " + name + " (" + system + ")", target: "packages." + system + "." + name, system: system}) (builtins.attrNames pkgs)) lib))')
          linux_packages=$(echo "$all_packages" | jq -c 'map(select(.system | test("linux")))')

          # Combine linux configs
          combined_linux=$(echo "$linux_home_configs $linux_packages" | jq -c -s 'add')
          echo "linux-configs=$combined_linux" >> $GITHUB_OUTPUT

          echo "Found Darwin configs: $combined_darwin"
          echo "Found Linux configs: $combined_linux"

  build-darwin:
    needs: discover-configurations
    if: ${{ fromJson(needs.discover-configurations.outputs.darwin-configs) != '[]' }}
    runs-on: macos-latest
    strategy:
      matrix:
        config: ${{ fromJson(needs.discover-configurations.outputs.darwin-configs) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nix-community
          skipPush: true

      - name: Build ${{ matrix.config.name }} (dry-run)
        run: |
          if [[ "${{ matrix.config.type }}" == "home-manager" ]]; then
            USERNAME=$(nix eval --raw .#vars.username)
            target="${{ matrix.config.target }}"
            # Replace $USERNAME in target
            target="${target//\$USERNAME/$USERNAME}"
            nix build ".#$target" --dry-run
          else
            nix build ".#${{ matrix.config.target }}" --dry-run
          fi

  build-linux:
    needs: discover-configurations
    if: ${{ fromJson(needs.discover-configurations.outputs.linux-configs) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: ${{ fromJson(needs.discover-configurations.outputs.linux-configs) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nix-community
          skipPush: true

      - name: Build ${{ matrix.config.name }} (dry-run)
        run: |
          if [[ "${{ matrix.config.target }}" == *"homeConfigurations"* ]]; then
            USERNAME=$(nix eval --raw .#vars.username)
            target="${{ matrix.config.target }}"
            # Replace $USERNAME in target
            target="${target//\$USERNAME/$USERNAME}"
            nix build ".#$target" --dry-run
          else
            nix build ".#${{ matrix.config.target }}" --dry-run
          fi
