name: Build Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      darwin-hosts:
        description: "Comma-separated list of Darwin hosts (optional, auto-detected if empty)"
        required: false
        type: string
      linux-hosts:
        description: "Comma-separated list of Linux hosts (optional, auto-detected if empty)"
        required: false
        type: string

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: nix-community
          skipPush: true

      - name: Check flake
        run: nix flake check --all-systems --accept-flake-config

      - name: Check formatting
        run: nix fmt . --accept-flake-config -- --check

  discover-configurations:
    runs-on: ubuntu-latest
    outputs:
      darwin-configs: ${{ steps.discover.outputs.darwin-configs }}
      linux-configs: ${{ steps.discover.outputs.linux-configs }}
      packages: ${{ steps.discover.outputs.packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Discover all configurations
        id: discover
        run: |
          echo "Discovering configurations..."

          # Get all darwinConfigurations
          echo "Discovering darwinConfigurations..."
          darwin_configs=$(nix eval --json .#darwinConfigurations --apply 'builtins.attrNames' --accept-flake-config | jq -c '[.[] | {name: ("darwinConfigurations." + .), target: ("darwinConfigurations." + . + ".system"), type: "darwin"}]')
          echo "Darwin system configs: $darwin_configs"

          # Get Darwin host list from flake or workflow input
          if [[ -n "${{ github.event.inputs.darwin-hosts }}" ]]; then
            echo "Using Darwin hosts from workflow input: ${{ github.event.inputs.darwin-hosts }}"
            darwin_hosts=$(echo "${{ github.event.inputs.darwin-hosts }}" | tr ',' '\n' | jq -R . | jq -s .)
          else
            echo "Auto-detecting Darwin hosts from darwinConfigurations..."
            darwin_hosts=$(nix eval --json .#darwinConfigurations --apply 'builtins.attrNames' --accept-flake-config)
          fi
          echo "Darwin hosts: $darwin_hosts"

          # Get Linux host list from workflow input or auto-detect
          if [[ -n "${{ github.event.inputs.linux-hosts }}" ]]; then
            echo "Using Linux hosts from workflow input: ${{ github.event.inputs.linux-hosts }}"
            linux_hosts=$(echo "${{ github.event.inputs.linux-hosts }}" | tr ',' '\n' | jq -R . | jq -s .)
          else
            echo "Auto-detecting Linux hosts from homeConfigurations..."
            # Get all home configurations and extract hosts, then filter out Darwin hosts
            all_home_hosts=$(nix eval --json .#homeConfigurations --apply 'builtins.attrNames' --accept-flake-config | jq -r '.[]' | cut -d'@' -f2 | sort -u)
            linux_hosts='[]'
            for host in $all_home_hosts; do
              # Check if this host is NOT in the Darwin hosts list
              is_darwin=$(echo "$darwin_hosts" | jq --arg host "$host" 'any(. == $host)')
              if [[ "$is_darwin" == "false" ]]; then
                linux_hosts=$(echo "$linux_hosts" | jq --arg host "$host" '. + [$host]')
              fi
            done
          fi
          echo "Linux hosts: $linux_hosts"

          # Get all homeConfigurations
          echo "Discovering homeConfigurations..."
          USERNAME=$(nix eval --raw .#vars.username --accept-flake-config)
          home_configs_names=$(nix eval --json .#homeConfigurations --apply 'builtins.attrNames' --accept-flake-config)
          echo "Home config names: $home_configs_names"

          # Process home configurations with auto-detected system types
          darwin_home_configs='[]'
          linux_home_configs='[]'

          for config in $(echo "$home_configs_names" | jq -r '.[]'); do
            host=$(echo "$config" | cut -d'@' -f2)
            
            # Check if host is in Darwin hosts list
            is_darwin_host=$(echo "$darwin_hosts" | jq --arg host "$host" 'any(. == $host)')
            
            if [[ "$is_darwin_host" == "true" ]]; then
              # Detect actual Darwin system architecture from the configuration
              system_arch=$(nix eval --json ".#homeConfigurations.\"$config\".pkgs.system" --accept-flake-config 2>/dev/null || echo '"aarch64-darwin"')
              system_arch=$(echo "$system_arch" | jq -r '.')
              darwin_home_configs=$(echo "$darwin_home_configs" | jq -c --arg host "$host" --arg config "$config" --arg system "$system_arch" '. + [{name: ("homeConfigurations " + $host), target: ("homeConfigurations.\"" + $config + "\".activationPackage"), type: "home-manager", system: $system}]')
            else
              # Detect actual Linux system architecture from the configuration
              system_arch=$(nix eval --json ".#homeConfigurations.\"$config\".pkgs.system" --accept-flake-config 2>/dev/null || echo '"x86_64-linux"')
              system_arch=$(echo "$system_arch" | jq -r '.')
              linux_home_configs=$(echo "$linux_home_configs" | jq -c --arg host "$host" --arg config "$config" --arg system "$system_arch" '. + [{name: ("homeConfigurations " + $host), target: ("homeConfigurations.\"" + $config + "\".activationPackage"), type: "home-manager", system: $system}]')
            fi
          done

          # Get all packages
          echo "Discovering packages..."
          all_packages='[]'
          for system in "x86_64-linux" "aarch64-linux" "aarch64-darwin"; do
            packages=$(nix eval --json ".#packages.$system" --apply 'builtins.attrNames' --accept-flake-config 2>/dev/null || echo '[]')
            for pkg in $(echo "$packages" | jq -r '.[]' 2>/dev/null); do
              all_packages=$(echo "$all_packages" | jq -c '. + [{name: "'"$pkg"' ('"$system"')", target: "packages.'"$system"'.'"$pkg"'", system: "'"$system"'"}]')
            done
          done

          # Combine configurations (without packages in linux configs now)
          combined_darwin=$(echo "$darwin_configs $darwin_home_configs" | jq -c -s 'add')
          combined_linux=$(echo "$linux_home_configs" | jq -c)

          echo "darwin-configs=$combined_darwin" >> $GITHUB_OUTPUT
          echo "linux-configs=$combined_linux" >> $GITHUB_OUTPUT
          echo "packages=$all_packages" >> $GITHUB_OUTPUT

          echo "Found Darwin configs: $combined_darwin"
          echo "Found Linux configs: $combined_linux"
          echo "Found packages: $all_packages"

  build-darwin:
    needs: discover-configurations
    if: ${{ fromJson(needs.discover-configurations.outputs.darwin-configs) != '[]' }}
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org/
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build all Darwin configurations
        run: |
          echo "Building Darwin configurations..."
          configs='${{ needs.discover-configurations.outputs.darwin-configs }}'
          echo "Configurations to build: $configs"

          USERNAME=$(nix eval --raw .#vars.username --accept-flake-config)
          echo "Username: $USERNAME"

          # Parse configurations and build each one
          echo "$configs" | jq -c '.[]' | while read -r config; do
            name=$(echo "$config" | jq -r '.name')
            target=$(echo "$config" | jq -r '.target')
            type=$(echo "$config" | jq -r '.type')
            
            echo "Building $name..."
            
            if [[ "$type" == "home-manager" ]]; then
              # Replace $USERNAME in target
              target="${target//\$USERNAME/$USERNAME}"
            fi
            
            echo "Running: nix build \".#$target\" --dry-run --accept-flake-config"
            if ! nix build ".#$target" --dry-run --accept-flake-config; then
              echo "Failed to build $name"
              exit 1
            fi
            echo "Successfully built $name"
          done

          echo "All Darwin configurations built successfully!"

  build-linux:
    needs: discover-configurations
    if: ${{ fromJson(needs.discover-configurations.outputs.linux-configs) != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: nix-community
          skipPush: true

      - name: Build all Linux configurations
        run: |
          echo "Building Linux configurations..."
          configs='${{ needs.discover-configurations.outputs.linux-configs }}'
          echo "Configurations to build: $configs"

          USERNAME=$(nix eval --raw .#vars.username --accept-flake-config)
          echo "Username: $USERNAME"

          # Parse configurations and build each one
          echo "$configs" | jq -c '.[]' | while read -r config; do
            name=$(echo "$config" | jq -r '.name')
            target=$(echo "$config" | jq -r '.target')
            
            echo "Building $name..."
            
            if [[ "$target" == *"homeConfigurations"* ]]; then
              # Replace $USERNAME in target
              target="${target//\$USERNAME/$USERNAME}"
            fi
            
            echo "Running: nix build \".#$target\" --dry-run --accept-flake-config"
            if ! nix build ".#$target" --dry-run --accept-flake-config; then
              echo "Failed to build $name"
              exit 1
            fi
            echo "Successfully built $name"
          done

          echo "All Linux configurations built successfully!"

  test-packages:
    needs: discover-configurations
    if: ${{ fromJson(needs.discover-configurations.outputs.packages) != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: nix-community
          skipPush: true

      - name: Test all packages
        run: |
          echo "Testing standalone packages..."
          packages='${{ needs.discover-configurations.outputs.packages }}'
          echo "Packages to test: $packages"

          # Parse packages and test each one
          echo "$packages" | jq -c '.[]' | while read -r package; do
            name=$(echo "$package" | jq -r '.name')
            target=$(echo "$package" | jq -r '.target')
            system=$(echo "$package" | jq -r '.system')
            
            echo "Testing $name on $system..."
            echo "Running: nix build \".#$target\" --dry-run --accept-flake-config"
            
            if ! nix build ".#$target" --dry-run --accept-flake-config; then
              echo "Failed to build package $name"
              exit 1
            fi
            echo "Successfully tested $name"
          done

          echo "All packages tested successfully!"
