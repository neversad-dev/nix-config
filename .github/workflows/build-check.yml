name: Build Check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nix-community
          skipPush: true

      - name: Check flake
        run: nix flake check --all-systems

      - name: Check formatting
        run: nix fmt . -- --check

  discover-configurations:
    runs-on: ubuntu-latest
    outputs:
      darwin-configs: ${{ steps.discover.outputs.darwin-configs }}
      linux-configs: ${{ steps.discover.outputs.linux-configs }}
      all-packages: ${{ steps.discover.outputs.all-packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Discover all configurations
        id: discover
        run: |
          echo "Discovering configurations..."

          # Get all darwinConfigurations
          echo "Discovering darwinConfigurations..."
          darwin_configs=$(nix eval --json .#darwinConfigurations --apply 'builtins.attrNames' | jq -c '[.[] | {name: ("darwinConfigurations." + .), target: ("darwinConfigurations." + . + ".system"), type: "darwin"}]')
          echo "Darwin system configs: $darwin_configs"

          # Get all homeConfigurations
          echo "Discovering homeConfigurations..."
          USERNAME=$(nix eval --raw .#vars.username)
          home_configs_names=$(nix eval --json .#homeConfigurations --apply 'builtins.attrNames')
          echo "Home config names: $home_configs_names"

          # Process home configurations
          darwin_home_configs='[]'
          linux_home_configs='[]'

          for config in $(echo "$home_configs_names" | jq -r '.[]'); do
            host=$(echo "$config" | cut -d'@' -f2)
            if [[ "$host" == "mbair" ]]; then
              darwin_home_configs=$(echo "$darwin_home_configs" | jq -c '. + [{name: "homeConfigurations '"$host"'", target: "homeConfigurations.\"'"$config"'\".activationPackage", type: "home-manager", system: "aarch64-darwin"}]')
            else
              linux_home_configs=$(echo "$linux_home_configs" | jq -c '. + [{name: "homeConfigurations '"$host"'", target: "homeConfigurations.\"'"$config"'\".activationPackage", type: "home-manager", system: "x86_64-linux"}]')
            fi
          done

          # Get all packages
          echo "Discovering packages..."
          linux_packages='[]'
          for system in "x86_64-linux" "aarch64-linux"; do
            packages=$(nix eval --json ".#packages.$system" --apply 'builtins.attrNames' 2>/dev/null || echo '[]')
            for pkg in $(echo "$packages" | jq -r '.[]' 2>/dev/null); do
              linux_packages=$(echo "$linux_packages" | jq -c '. + [{name: "packages '"$pkg"' ('"$system"')", target: "packages.'"$system"'.'"$pkg"'", system: "'"$system"'"}]')
            done
          done

          # Combine configurations
          combined_darwin=$(echo "$darwin_configs $darwin_home_configs" | jq -c -s 'add')
          combined_linux=$(echo "$linux_home_configs $linux_packages" | jq -c -s 'add')

          echo "darwin-configs=$combined_darwin" >> $GITHUB_OUTPUT
          echo "linux-configs=$combined_linux" >> $GITHUB_OUTPUT

          echo "Found Darwin configs: $combined_darwin"
          echo "Found Linux configs: $combined_linux"

  build-darwin:
    needs: discover-configurations
    if: ${{ fromJson(needs.discover-configurations.outputs.darwin-configs) != '[]' }}
    runs-on: macos-latest
    strategy:
      matrix:
        config: ${{ fromJson(needs.discover-configurations.outputs.darwin-configs) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org/
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build ${{ matrix.config.name }} (dry-run)
        run: |
          if [[ "${{ matrix.config.type }}" == "home-manager" ]]; then
            USERNAME=$(nix eval --raw .#vars.username)
            target="${{ matrix.config.target }}"
            # Replace $USERNAME in target
            target="${target//\$USERNAME/$USERNAME}"
            nix build ".#$target" --dry-run
          else
            nix build ".#${{ matrix.config.target }}" --dry-run
          fi

  build-linux:
    needs: discover-configurations
    if: ${{ fromJson(needs.discover-configurations.outputs.linux-configs) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: ${{ fromJson(needs.discover-configurations.outputs.linux-configs) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nix-community
          skipPush: true

      - name: Build ${{ matrix.config.name }} (dry-run)
        run: |
          if [[ "${{ matrix.config.target }}" == *"homeConfigurations"* ]]; then
            USERNAME=$(nix eval --raw .#vars.username)
            target="${{ matrix.config.target }}"
            # Replace $USERNAME in target
            target="${target//\$USERNAME/$USERNAME}"
            nix build ".#$target" --dry-run
          else
            nix build ".#${{ matrix.config.target }}" --dry-run
          fi
