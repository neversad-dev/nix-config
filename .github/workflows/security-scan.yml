name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: nix-community
          skipPush: true

      - name: Run nix security audit
        run: |
          echo "Running nix security audit..."
          # Check for known vulnerabilities in dependencies
          nix flake show --json --accept-flake-config | jq -r '.packages | to_entries[] | .key' | while read -r system; do
            echo "Checking packages for $system..."
            nix flake show --json --accept-flake-config | jq -r ".packages.$system | to_entries[] | .key" | while read -r pkg; do
              echo "Auditing package $pkg for $system..."
              nix audit ".#packages.$system.$pkg" --accept-flake-config || echo "No security issues found for $pkg"
            done
          done

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          # This is a basic check - in practice, you might want to use more sophisticated tools
          nix flake metadata --json --accept-flake-config | jq -r '.locks.nodes | to_entries[] | select(.value.type == "github") | "\(.key): \(.value.original.ref)"'

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Check flake security
        run: |
          echo "Checking flake for security issues..."
          # Run comprehensive flake checks
          nix flake check --accept-flake-config
          echo "Flake security check completed"

      - name: Test all configurations
        run: |
          echo "Testing all configurations for security..."
          # Test Darwin configurations
          nix flake show --json --accept-flake-config | jq -r '.darwinConfigurations | to_entries[] | .key' | while read -r config; do
            echo "Testing Darwin configuration: $config"
            nix build ".#darwinConfigurations.$config.system" --dry-run --accept-flake-config || echo "Darwin config $config test failed"
          done

          # Test Home Manager configurations
          nix flake show --json --accept-flake-config | jq -r '.homeConfigurations | to_entries[] | .key' | while read -r config; do
            echo "Testing Home Manager configuration: $config"
            nix build ".#homeConfigurations.$config.activationPackage" --dry-run --accept-flake-config || echo "Home config $config test failed"
          done
